-> demonstrates reading values from a List

import java.util.ArrayList;
import java.util.List;

public class ListIterationExample {

    public static void main(String[] args) {
        List<String> fruits = new ArrayList<>();
        fruits.add("Apple");
        fruits.add("Banana");
        fruits.add("Mango");

        // Iterating using traditional for loop
        System.out.println("Iterating using for loop");
        for (int i = 0; i < fruits.size(); i++) {
            System.out.println(fruits.get(i));
        }

        // Iterating using enhanced for loop
        for(String fruit : fruits) {
            System.out.println(fruit);
        }

        // Iterating using forEach method
        System.out.println("Iterating using forEach method");
        fruits.forEach(fruit -> System.out.println(fruit));

        // Iterating using forEach method with method reference
        System.out.println("Iterating using forEach method with method reference");
        fruits.forEach(System.out::println);
    }
}
_________________________________________________________________________________
-> create a Map and iterate through its keys and values using different methods.

import java.util.HashMap;
import java.util.Map;

public class MapIterationExample {
    public static void main(String[] args) {
        // Create and initialize a Map
        Map<Integer, String> fruitsMap = new HashMap<>();
        fruitsMap.put(1, "Apple");
        fruitsMap.put(2, "Banana");
        fruitsMap.put(3, "Cherry");
        fruitsMap.put(4, "Date");

        System.out.println("Iterating through values using for-each and values():");
        // Method 1: Iterating through values directly
        for (String value : fruitsMap.values()) {
            System.out.println("Value: " + value);
        }
		
		// Iterate through the keys of the map and print each key
		for (Integer key : fruitsMap.keySet()) {
           System.out.println("Key: " + key);
        }

        System.out.println("\nIterating through entries and accessing values:");
        // Method 2: Iterating through entrySet and accessing values
        for (Map.Entry<Integer, String> entry : fruitsMap.entrySet()) {
            System.out.println("Key: " + entry.getKey() + ", Value: " + entry.getValue());
        }

        System.out.println("\nIterating through keys and accessing values:");
        // Method 3: Iterating through keys and accessing values
        for (Integer key : fruitsMap.keySet()) {
            System.out.println("Key: " + key + ", Value: " + fruitsMap.get(key));
        }

        System.out.println("\nIterating through keys and values using forEach method:");
        // Method 4: Iterating through keys and values using forEach method
        fruitsMap.forEach((key, value) -> System.out.println("Key: " + key + ", Value: " + value));

        System.out.println("\nIterating through keys and values using forEach method with lambda expression:");
        // Method 5: Iterating through keys and values using forEach method with lambda expression
        fruitsMap.forEach((key, value) -> System.out.println("Key: " + key + ", Value: " + value));

        System.out.println("\nIterating through keys using forEach method with method reference:");
        // Method 6: Iterating through keys using forEach method with method reference
        fruitsMap.keySet().forEach(System.out::println);

        System.out.println("\nIterating through values using forEach method with method reference:");
        // Method 7: Iterating through values using forEach method with method reference
        fruitsMap.values().forEach(System.out::println);

        System.out.println("\nIterating through entries using forEach method with method reference:");
        // Method 8: Iterating through entries using forEach method with method reference
        fruitsMap.entrySet().forEach(System.out::println);


    }
}
_________________________________________________________________________________

-> Traditional for loop, reading values from an array

public class ForLoopExample {
    public static void main(String[] args) {
        int[] numbers = {1, 2, 3, 4, 5};

        // Traditional for loop
        for (int i = 0; i < numbers.length; i++) {
            System.out.println("Element at index " + i + ": " + numbers[i]);
        }
    }
}
---------------------------------------------------------------------------------

-> Enhanced for Loop


public class EnhancedForLoopExample {
    public static void main(String[] args) {
        int[] numbers = {1, 2, 3, 4, 5};

        // Enhanced for loop (for-each loop)
        for (int num : numbers) {
            System.out.println("Element: " + num);
        }
    }
}
---------------------------------------------------------------------------------
-> Using forEach by converting array to stream

import java.util.Arrays;

public class ForEachExample {
    public static void main(String[] args) {
        int[] numbers = {1, 2, 3, 4, 5};

        // Using forEach by converting array to stream
        Arrays.stream(numbers)
              .forEach(num -> System.out.println("Element: " + num));
    }
}


forEach method is part of the Iterable interface, which is available in collections like List, Set, etc. However, arrays do not directly support the forEach method, but you can convert an array to a stream using the Arrays.stream() method to use forEach with arrays.


https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/stream/IntStream.html#forEach(java.util.function.IntConsumer)
https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Iterable.html#forEach(java.util.function.Consumer)

---------------------------------------------------------------------------------

-> forEach method is part of the IntStream class when working with primitive int arrays, and other primitive streams like DoubleStream or LongStream.

In the case of IntStream, it is a specialized stream for handling primitive int values, and it allows methods like forEach to be used directly on an array of primitive int values.

Here's a quick breakdown:

    IntStream: A stream that deals with primitive int values.
    forEach: A terminal operation available in streams, including IntStream, that processes each element of the stream.


import java.util.stream.IntStream;

public class ForEachWithIntStreamExample {
    public static void main(String[] args) {
        int[] numbers = {1, 2, 3, 4, 5};

        // Using IntStream and forEach
        IntStream.of(numbers)
                 .forEach(num -> System.out.println("Element: " + num));				 
		
		// IntStream.of(1,2,3,4,5).forEach(System.out::println);
    }
}

_________________________________________________________________________________

-> Using a labeled continue with for loops

public class Main {
    public static void main(String[] args) {

        // The first for statement is labeled "loop1"
        loop1:
        for (int i = 0; i < 3; i++) {
            // The second for statement is labeled "loop2"
            loop2:
            for (int j = 0; j < 3; j++) {
                if (i == 1 && j == 1) {
                    continue loop1;
                }
                System.out.println("i: " + i + ", j: " + j);
            }
        }
    }
}

Output:
i: 0, j: 0
i: 0, j: 1
i: 0, j: 2
i: 1, j: 0
i: 2, j: 0
i: 2, j: 1
i: 2, j: 2

Notice how it skips both "i = 1, j = 1" and "i = 1, j = 2".

there are two nested for loops. The outer loop is labeled as loop1, and the inner loop is labeled as loop2. The outer loop iterates over the variable i from 0 to 2, and the inner loop iterates over the variable j from 0 to 2.

Inside the inner loop, there is a conditional statement that checks if i is equal to 1 and j is equal to 1. If this condition is met, the continue statement is used with the label loop1. This causes the control to skip the current iteration of the outer loop, effectively continuing with the next iteration of i.

---------------------------------------------------------------------------------
-> Using a labeled break with for loops

Notice the difference with the previous continue example: when break loop1 is encountered, the execution of the outer loop is terminated, so there are no further logs beyond "i = 1, j = 0"; when continue loop1 is encountered, the execution of the outer loop continues at the next iteration, so only "i = 1, j = 1" and "i = 1, j = 2" are skipped.


public class Main {
    public static void main(String[] args) {

        // The first for statement is labeled "loop1"
        loop1:
        for (int i = 0; i < 3; i++) {
            // The second for statement is labeled "loop2"
            loop2:
            for (int j = 0; j < 3; j++) {
                if (i == 1 && j == 1) {
                    break loop1;
                }
                System.out.println("i: " + i + ", j: " + j);
            }
        }
    }
}

Output:
i: 0, j: 0
i: 0, j: 1
i: 0, j: 2
i: 1, j: 0

Inside the inner loop, there is a conditional statement that checks if i is equal to 1 and j is equal to 1. If this condition is met, the break statement is used with the label loop1. This causes the control to break out of the outer loop, effectively terminating both loops.

_________________________________________________________________________________

-> 
import java.util.Set;
import java.util.TreeSet;
import java.util.Comparator;

public class TreeSetExample {
    public static void main(String[] args) {
        // TreeSet with natural ordering of integers
        Set<Integer> numbers = new TreeSet<>();
        numbers.add(5);
        numbers.add(2);
        numbers.add(8);
        numbers.add(2); // Duplicate, will be ignored
        System.out.println("TreeSet with natural ordering: " + numbers); // [2, 5, 8]

        // TreeSet with custom Comparator: order by string length
        Set<String> names = new TreeSet<>(Comparator.comparing(String::length).thenComparing(String::compareTo));
        names.add("Alice");
        names.add("Bob");
        names.add("Charlie");
        names.add("Ram");
        System.out.println("TreeSet with custom Comparator: " + names); // [Bob, Alice, Charlie]
    }
}

Output:
TreeSet with natural ordering: [2, 5, 8]
TreeSet with custom Comparator: [Bob, Ram, Alice, Charlie]

_________________________________________________________________________________

-> 

import java.util.*;

public class SetOrderingExample {
    public static void main(String[] args) {
        // Original insertion order: [5, 2, 8, 2]
        List<Integer> input = Arrays.asList(5, 2, 8, 2);

        // HashSet: no guaranteed order
        Set<Integer> hashSet = new HashSet<>(input);
        System.out.println("HashSet (no order): " + hashSet);

        // LinkedHashSet: maintains insertion order
        Set<Integer> linkedHashSet = new LinkedHashSet<>(input);
        System.out.println("LinkedHashSet (insertion order): " + linkedHashSet);

        // TreeSet: sorted order
        Set<Integer> treeSet = new TreeSet<>(input);
        System.out.println("TreeSet (sorted order): " + treeSet);
    }
}

Output:
HashSet (no order): [2, 5, 8]       ← unpredictable
LinkedHashSet (insertion order): [5, 2, 8]
TreeSet (sorted order): [2, 5, 8]

Key Takeaways:
    Use HashSet when you only care about uniqueness, not order.
    Use LinkedHashSet when you need to preserve the order items were added.
    Use TreeSet when you want automatic sorting (natural or with a custom comparator).

_________________________________________________________________________________

-> 

import java.util.*;

public class SetNullAndDuplicateTest {
    public static void main(String[] args) {
        // HashSet
        Set<String> hashSet = new HashSet<>();
        hashSet.add("apple");
        hashSet.add("apple");   // duplicate
        hashSet.add(null);      // allowed
        System.out.println("HashSet: " + hashSet);

        // LinkedHashSet
        Set<String> linkedSet = new LinkedHashSet<>();
        linkedSet.add("apple");
        linkedSet.add(null);    // allowed
        linkedSet.add("banana");
        linkedSet.add("apple"); // duplicate
        System.out.println("LinkedHashSet: " + linkedSet);

        // TreeSet
        Set<String> treeSet = new TreeSet<>();
        treeSet.add("apple");
        treeSet.add("banana");
//         treeSet.add(null);   // ❌ uncommenting this throws NullPointerException
        System.out.println("TreeSet: " + treeSet);
    }
}

Output:
HashSet: [null, apple]
LinkedHashSet: [apple, null, banana]
TreeSet: [apple, banana]

treeSet.add(null); will throw NullPointerException because TreeSet uses comparisons (compareTo) and null cannot be compared.


Summary:

    HashSet
        Does not maintain order of elements.
        Does not allow duplicates.
        ✅ Allows one null element.

    LinkedHashSet
        ✅ Maintains insertion order.
        Does not allow duplicates.
        ✅ Allows one null element.

    TreeSet
        ✅ Maintains elements in sorted order.
        Does not allow duplicates.
        ❌ Does not allow null elements — will throw NullPointerException.
_________________________________________________________________________________

-> 
public class Main {
    public static void main(String[] args) {
        String a = "apple";
        String b = "banana";
        String c = "Apple";

        System.out.println(a.compareTo(b));   // -1  (a < b)
        System.out.println(b.compareTo(a));   //  1  (b > a)
        System.out.println(a.compareTo(c));   // 32  ('a' (97) - 'A' (65))

        System.out.println(a.compareTo(a));  // 0 (a == a)

        System.out.println("abc".compareTo("abc")); // 0 (abc == abc)
        System.out.println("abc".compareTo("abcd")); // -1 (abc < abcd)
        System.out.println("abc".compareTo("ab")); // 1 (abc > ab)
        System.out.println("abc".compareTo("abcde")); // -2 (abc < abcde)

        System.out.println("abc".compareTo("abf"));  // -3

    }
}


Output:
-1
1
32
0
0
-1
1
-2
-3

Explanation: System.out.println("abc".compareTo("abcd")); // -1 (abc < abcd)

In this case, `"abc"` is compared with `"abcd"`. The first three characters (`'a'`, `'b'`, `'c'`) are identical in both strings, so the comparison reaches the end of `"abc"`. Since `"abc"` has no more characters to compare, it is considered smaller than `"abcd"`. The `compareTo` method returns the difference in length between the two strings, which is `-1` in this case.

The Unicode comparison works by evaluating the numeric Unicode values of characters. For example, the Unicode value of `'a'` is 97, `'b'` is 98, and `'c'` is 99. If there were a difference in any of these characters, the method would return the difference between their Unicode values. However, since the characters match up to the length of `"abc"`, the result is determined by the length difference.
_________________________________________________________________________________

-> When values are guaranteed non-null and you want fast, natural, lexicographical comparison, String.compareTo() is a good option.

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class SortExample {
    public static void main(String[] args) {
        List<String> names = Arrays.asList("apple", "banana", "cherry", "date");

        // Natural sort using String.compareTo() via Comparable interface
        Collections.sort(names);  // internally uses o1.compareTo(o2)
        
        System.out.println(names); // [apple, banana, cherry, date]
    }
}
_________________________________________________________________________________

-> If there is null value in above code it will throw a NullPointerException at runtime because Collections.sort(...) internally calls String.compareTo(...), and that does not allow null values.

import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

public class SortExample {
    public static void main(String[] args) {
        List<String> names = Arrays.asList("apple", "banana", "cherry", null);

        //Safe sort: move nulls to the end
        names.sort(Comparator.nullsLast(String::compareTo));
        
        System.out.println(names); // [apple, banana, cherry, null]
    }
}


Explanation:
    Comparator.nullsLast(...) wraps the comparator and ensures that null values come last (you can also use nullsFirst(...)).
    String::compareTo is used only when both values are non-null.
_________________________________________________________________________________	

-> a very simple example where BigDecimal.compareTo(...) is used — to check whether a given price exceeds a limit.

import java.math.BigDecimal;

public class PriceChecker {
    public static void main(String[] args) {
        BigDecimal price = new BigDecimal("10.00");
        BigDecimal limit = new BigDecimal("9.99");

        // compareTo returns:
        //  0 if equal
        //  >0 if price > limit
        //  <0 if price < limit
        if (price.compareTo(limit) > 0) {
            System.out.println("Price is above the limit.");
        } else {
            System.out.println("Price is within the limit.");
        }
    }
}

Output:
Price is above the limit.

_________________________________________________________________________________

-> Why use BigDecimal.compareTo() over equals()

    compareTo() considers numerical equality, ignoring scale:
	
	This is critical in monetary calculations where $2.00 == $2.0 logically.


import java.math.BigDecimal;

public class Main {
    public static void main(String[] args) {
        System.out.println(new BigDecimal("2.0").equals(new BigDecimal("2.00")) == false);  //true
        System.out.println(new BigDecimal("2.0").compareTo(new BigDecimal("2.00")) == 0);  //true
    }
}

_________________________________________________________________________________

-> a real-world example using BigDecimal.compareTo(...) — a shopping cart system where you want to sort products by price, and prices are stored using BigDecimal for precision (e.g., to avoid floating-point rounding errors).

import java.math.BigDecimal;

public class Product implements Comparable<Product> {
    private final String name;
    private final BigDecimal price;

    public Product(String name, BigDecimal price) {
        this.name = name;
        this.price = price;
    }

    public BigDecimal getPrice() {
        return price;
    }

    public String getName() {
        return name;
    }

    // Compare products by price
    @Override
    public int compareTo(Product other) {
        return this.price.compareTo(other.price);  // 🔹 Natural monetary comparison
    }

    @Override
    public String toString() {
        return name + " - $" + price;
    }
}


//Sort products by ascending price
import java.math.BigDecimal;
import java.util.*;

public class ProductCatalog {
    public static void main(String[] args) {
        List<Product> products = Arrays.asList(
            new Product("Coffee", new BigDecimal("2.99")),
            new Product("Espresso", new BigDecimal("3.49")),
            new Product("Latte", new BigDecimal("4.25")),
            new Product("Water", new BigDecimal("1.00"))
        );

        Collections.sort(products);  // Uses compareTo to sort by price

        for (Product p : products) {
            System.out.println(p);
        }
    }
}

Output:
Water - $1.00
Coffee - $2.99
Espresso - $3.49
Latte - $4.25

_________________________________________________________________________________

-> Product class in above example  converted to record class

import java.math.BigDecimal;

public record Product(String name, BigDecimal price) implements Comparable<Product> {

    // Compare products by price
    @Override
    public int compareTo(Product other) {
        return this.price.compareTo(other.price);  // 🔹 Natural monetary comparison
    }

    @Override
    public String toString() {
        return name + " - $" + price;
    }
}


import java.math.BigDecimal;
import java.util.*;

public class ProductCatalog {
    public static void main(String[] args) {
        List<Product> products = Arrays.asList(
            new Product("Coffee", new BigDecimal("2.99")),
            new Product("Espresso", new BigDecimal("3.49")),
            new Product("Latte", new BigDecimal("4.25")),
            new Product("Water", new BigDecimal("1.00"))
        );

        Collections.sort(products);  // Uses compareTo to sort by price

        for (Product p : products) {
            System.out.println(p);
        }
    }
}

Output:
Water - $1.00
Coffee - $2.99
Espresso - $3.49
Latte - $4.25

_________________________________________________________________________________

-> Refactor above code:

Instead of implementing Comparable, used a static Comparator for flexibility.

Flexibility:
    By using Product.PRICE_COMPARATOR, you're not locking the class into a single “natural” sort order.
    You can easily define and use multiple comparators later (e.g., by name, descending price).
	
	
// static comparator for comparing products by price in descending order
    public static final Comparator<Product> PRICE_DESC_COMPARATOR =
            Comparator.comparing(Product::price).reversed();
    
    // static comparator for comparing products by name in a case-insensitive manner
    public static final Comparator<Product> NAME_COMPARATOR =
            Comparator.comparing(Product::name, String.CASE_INSENSITIVE_ORDER);


import java.math.BigDecimal;
import java.util.Comparator;

public record Product(String name, BigDecimal price) {

    // static comparator for comparing products by price
    public static final Comparator<Product> PRICE_COMPARATOR = Comparator.comparing(Product::price);

    @Override
    public String toString() {
        return name + " - $" + price;
    }
}


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

public class ProductCatalog {
    public static void main(String[] args) {
        List<Product> products = Arrays.asList(
            new Product("Coffee", new BigDecimal("2.99")),
            new Product("Espresso", new BigDecimal("3.49")),
            new Product("Latte", new BigDecimal("4.25")),
            new Product("Water", new BigDecimal("1.00"))
        );

        products.sort(Product.PRICE_COMPARATOR);

        for (Product p : products) {
            System.out.println(p);
        }
    }
}

Output:
Water - $1.00
Coffee - $2.99
Espresso - $3.49
Latte - $4.25

_________________________________________________________________________________

-> a simple example demonstrating how to use Instant.compareTo(...) to compare two timestamps:

import java.time.Instant;

public class Main {
    public static void main(String[] args) {
        Instant start = Instant.now();

        // Simulate some delay
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }

        Instant end = Instant.now();

        // Compare two Instants
        int result = end.compareTo(start);

        if (result > 0) {
            System.out.println("End is after start");
        } else if (result < 0) {
            System.out.println("End is before start");
        } else {
            System.out.println("Both instants are equal");
        }
    }
}

Output:
End is after start
_________________________________________________________________________________


