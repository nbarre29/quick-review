-> Example of Generic Class

/**
 * A generic class that can hold a single object of any type.
 *
 * @param <T> the type of the object to be stored
 */
class Box<T> {
    private T t;

    /**
     * Sets the value of the box.
     *
     * @param t the value to set
     */
    public void set(T t) {
        this.t = t;
    }

    /**
     * Retrieves the value stored in the box.
     *
     * @return the stored value
     */
    public T get() {
        return t;
    }
}

public class Main {
    public static void main(String[] args) {
        // Create and use a Box for Integers
        Box<Integer> integerBox = new Box<>();
        integerBox.set(42);
        System.out.println("Integer Box contains: " + integerBox.get());

        // Create and use a Box for Strings
        Box<String> stringBox = new Box<>();
        stringBox.set("Hello Generics!");
        System.out.println("String Box contains: " + stringBox.get());
    }
}

Output:
Integer Box contains: 42
String Box contains: Hello Generics!

Explanation:

    We create two boxes, one for Integer and another for String.

    Each box is used to store and retrieve data of its specific type (Integer or String), all verified at compile time
	
	
-> Example of Generic method.



public class GenericMethodDemo {

    // Generic method to print elements of an array
    public static <E> void printArray(E[] inputArray) {
        for (E element : inputArray) {
            System.out.print(element + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        
        // Arrays of different types
        Integer[] intArray = { 1, 2, 3, 4, 5 };
        Double[] doubleArray = { 1.1, 2.2, 3.3, 4.4 };
        String[] stringArray = { "Hello", "Generic", "Methods" };
        
        // Call the generic method with different types
        System.out.println("Array integerArray contains:");
        printArray(intArray);

        System.out.println("Array doubleArray contains:");
        printArray(doubleArray);

        System.out.println("Array stringArray contains:");
        printArray(stringArray);
    }
}

Output:
Array integerArray contains:
1 2 3 4 5 
Array doubleArray contains:
1.1 2.2 3.3 4.4 
Array stringArray contains:
Hello Generic Methods 


Explanation:

    The <E> before the return type void lets the compiler know this method is generic.

    Any type used in place of E must be a reference type (for example, Integer, String, etc.), but you can handle arrays of any such type.

    In the main method, we create different arrays—Integer[], Double[], and String[]—then call the same printArray method on each one.


-> A simplified Java example demonstrating different ways of declaring generics, wildcards, and their bounds. Read through the comments carefully to understand each case.

import java.util.ArrayList;
import java.util.List;

public class GenericExamples {
    
    // 1. <T>: Simple generic type method
    //    This method can take any type T and will treat 'param' as that T.
    //    The type T is "fixed" once it's inferred or declared.
    public static <T> void simpleGenericMethod(T param) {
        System.out.println("simpleGenericMethod() received: " + param);
    }

    // 2. <?>: Unbounded wildcard
    //    The parameter can be any List of any type, but you don't know what type that is.
    //    In practice, you can only do operations valid for "List of unknown".
    public static void unboundedWildcard(List<?> list) {
        // You can read from it as Objects:
        for (Object obj : list) {
            System.out.println("Item in unbounded list: " + obj);
        }
        
        // list.add(new Object()); // Not allowed, because we don't know the element type.
    }

    // 3. <? extends T>: Upper-bounded wildcard
    //    The list's elements are some subclass (or the same) of T.
    //    Typically used when you want to "read" from the structure.
    //    You know the elements are at least T, so you can safely get them as T.
    public static void upperBoundedWildcard(List<? extends Number> list) {
        // We can read elements as Numbers safely
        for (Number num : list) {
            System.out.println("Number from list: " + num);
        }
        
        // list.add(123); // Not allowed! Because the list could be a List<Double> internally.
        // The compiler doesn’t let you add an Integer to a possibly-List<Double>.
    }

    // 4. <? super T>: Lower-bounded wildcard
    //    The list’s elements are some supertype of T (could be T itself, or a parent class).
    //    Typically used when you want to "write/insert" into the structure.
    //    You know it’s safe to add T (or any subclass of T), but reading is not type-specific.
    public static void lowerBoundedWildcard(List<? super Integer> list) {
        // We can safely add Integer (or its subclass, if any) to the list, ( just note that Integer class has no subclasses )
        // because we know the list can handle at least Integer.
        list.add(100);
        list.add(999);
        
        // Reading from the list only gives us Objects (we lose type specificity).
        for (Object obj : list) {
            System.out.println("Item in lower bounded wildcard list: " + obj);
        }
    }

    public static void main(String[] args) {
        
        // 1. <T> (simple generic method) usage:
        simpleGenericMethod("Hello");   // T is inferred as String
        simpleGenericMethod(123);       // T is inferred as Integer
        
        // 2. <?> (unbounded wildcard)
        List<String> stringList = new ArrayList<>();
        stringList.add("alpha");
        stringList.add("beta");
        unboundedWildcard(stringList);  // Valid: it's a List of unknown type (in this case, String)

        // 3. <? extends T> (upper bounded wildcard)
        List<Integer> intList = new ArrayList<>();
        intList.add(10);
        intList.add(20);
        upperBoundedWildcard(intList);  // Valid: Integer extends Number
        // The method can read elements as Number, but cannot safely add new elements.

        // 4. <? super T> (lower bounded wildcard)
        List<Number> numberList = new ArrayList<>();
        numberList.add(3.14);
        numberList.add(42);
        lowerBoundedWildcard(numberList);  // Valid: Number is a supertype of Integer
        // The method can safely add Integers to the list (since Number is a super of Integer).
    }
}


Explanation Recap

    <T>: A simple generic type placeholder. It’s fixed when the method is called. For example, <T> void foo(T param) can take foo("aString") (where T is String) or foo(123) (where T is Integer).

    <?>: An unbounded wildcard. It says “any type goes here, but I have no idea which type.” So you can only do operations valid for any possible type (like reading elements as Object).

    <? extends T>: An upper-bounded wildcard. The generic type is “some subclass of T (or T itself).” This is often used for reading. In the example, List<? extends Number> ensures any element you get out is at least a Number, so reading them as Number is safe. But you cannot put arbitrary Number objects back in, because the list could be specifically a List<Integer> or a List<Double>.

    <? super T>: A lower-bounded wildcard. The generic type is “some supertype of T (or T itself).” This is often used for writing. For example, List<? super Integer> means you can safely insert Integer (or any subclass, if that existed), but reading elements from it only yields Object because the collection could be a List<Object> in the worst case.
	
	
Use the above patterns whenever you need more flexible APIs, depending on whether you want to consume values (write into a collection) or produce values (read from a collection).
______________________________________________________________________________________________________________________

Mnemonic: PECS
    Producer Extends, Consumer Super


Purpose					Use this wildcard
Read from a producer	? extends T
Write to a consumer		? super T

______________________________________________________________________________________________________________________

import java.util.ArrayList;
import java.util.List;

class Animal {}
class Dog extends Animal {}
class Puppy extends Dog {}

public class Test {
    public static void main(String[] args) {

        List<? super Puppy> list = new ArrayList<Animal>();
        list.add(new Puppy());     // ✅ OK — exactly Puppy
        list.add(new Dog());       // ❌ ERROR — Dog is a superclass of Puppy
        list.add(new Animal());    // ❌ ERROR — Animal is a superclass of Puppy

        Object obj = list.get(0); // ✅ OK
        Puppy p = list.get(0);    // ❌ ERROR — can't guarantee it's a Puppy



//        List<? extends Animal> animals = List.of(new Dog(), new Puppy());
        List<? extends Animal> animals = new ArrayList<Animal>();
        Animal a = animals.get(0); // ✅ OK
        animals.add(new Dog());    // ❌ ERROR — can't add anything
        animals.add(null); // ✅ OK — null is allowed

    }

}


Object
 └── Animal
      └── Dog
           └── Puppy
----------------------------------------------		   
		   
List<? super Puppy> list = new ArrayList<Animal>();

This means:

    The list can hold objects of type Puppy or any superclass of Puppy.

So the actual type of the list might be:
    List<Puppy> ✅
    List<Dog> ✅
    List<Animal> ✅
    List<Object> ✅

You can only safely add instances of Puppy or subclasses of it (there are none, so just Puppy).
Why?
    The compiler only knows that the list holds some unknown supertype of Puppy. So it allows adding Puppy or its subclasses, but not superclasses like Dog or Animal — because that could break type safety if the actual list is of a more specific type.

----------------------------------------------
		   

______________________________________________________________________________________________________________________

? extends T

    Meaning: Any subtype of T — that is, T or anything that extends from T.

    Use Case: This is useful when you're reading from a collection

    Can Add? ❌ No — you can't safely add any element (except null), because the actual type might be more specific than T.

    Can Read As? ✅ Yes — elements can be safely read as type T or its subclass.

? super T

    Meaning: Any supertype of T — that is, T or anything that T inherits from.

    Use Case: This is ideal when you're writing to a collection

    Can Add? ✅ Yes — you can safely add elements of type T or its subclasses.

    Can Read As? ❌ No — you can't safely read elements as T, only as Object, because the actual type could be any supertype of T.

______________________________________________________________________________________________________________________


-> import java.util.HashMap;
import java.util.Map;

public class WildcardExample {

    // A simple interface to represent a Login type
    interface Login {
        void login();
    }

    // Some classes implementing the Login interface
    static class EmailLogin implements Login {
        @Override
        public void login() {
            System.out.println("Email login");
        }
    }

    static class GoogleLogin implements Login {
        @Override
        public void login() {
            System.out.println("Google login");
        }
    }

    // An enum for possible login providers
    enum LoginProvider {
        EMAIL, GOOGLE
    }

    // A method returning a map whose values are some subtype of Login
    private static Map<LoginProvider, ? extends Login> createLoginMap() {
        // In practice, you might build or fetch this map from somewhere else.
        // For demonstration, we hardcode different Login types here.
        // IMPORTANT: We'll actually create a concrete map with 'Login' as the value type
        // and return it as 'Map<LoginProvider, ? extends Login>'.
        Map<LoginProvider, Login> map = new HashMap<>();
        map.put(LoginProvider.EMAIL, new EmailLogin());
        map.put(LoginProvider.GOOGLE, new GoogleLogin());
        return map;
    }

    public static void main(String[] args) {
        Map<LoginProvider, ? extends Login> loginMap = createLoginMap();

        // We can read from the map and safely treat the values as Login:
        Login emailLogin = loginMap.get(LoginProvider.EMAIL);
        emailLogin.login();  // This will print "Email login"

        Login googleLogin = loginMap.get(LoginProvider.GOOGLE);
        googleLogin.login(); // This will print "Google login"

        // But notice we CANNOT add new entries like this:
        // loginMap.put(LoginProvider.EMAIL, new EmailLogin());
        // ^ This will cause a compilation error, because ? extends Login
        //   means the values might be any specific subtype of Login,
        //   and the compiler won't let you insert something that might violate it.

        // Also note that loginMap is effectively read-only from your code's perspective,
        // even though the underlying map might be modifiable if it was typed differently.
    }
}
----------------------------------------------------------------------------------------------------------------------
-> Convert inner classes from above to lambda expressions.

The EmailLogin and GoogleLogin classes can be converted to lambda expressions since they implement a functional interface (Login).

Replace the inner classes with lambda expressions in the createLoginMap method.

// Before
map.put(LoginProvider.EMAIL, new EmailLogin());
map.put(LoginProvider.GOOGLE, new GoogleLogin());

// After
map.put(LoginProvider.EMAIL, () -> System.out.println("Email login"));
map.put(LoginProvider.GOOGLE, () -> System.out.println("Google login"));


Complete Fixed Code:

import java.util.HashMap;
import java.util.Map;

public class WildcardExample {

    // A simple interface to represent a Login type
    interface Login {
        void login();
    }

    // An enum for possible login providers
    enum LoginProvider {
        EMAIL, GOOGLE
    }

    // A method returning a map whose values are some subtype of Login
    private static Map<LoginProvider, ? extends Login> createLoginMap() {
        // In practice, you might build or fetch this map from somewhere else.
        // For demonstration, we hardcode different Login types here.
        // IMPORTANT: We'll actually create a concrete map with 'Login' as the value type
        // and return it as 'Map<LoginProvider, ? extends Login>'.
        Map<LoginProvider, Login> map = new HashMap<>();
        map.put(LoginProvider.EMAIL, () -> System.out.println("Email login"));
        map.put(LoginProvider.GOOGLE, () -> System.out.println("Google login"));
        return map;
    }

    public static void main(String[] args) {
        Map<LoginProvider, ? extends Login> loginMap = createLoginMap();

        // We can read from the map and safely treat the values as Login:
        Login emailLogin = loginMap.get(LoginProvider.EMAIL);
        emailLogin.login();  // This will print "Email login"

        Login googleLogin = loginMap.get(LoginProvider.GOOGLE);
        googleLogin.login(); // This will print "Google login"

        // But notice we CANNOT add new entries like this:
        // loginMap.put(LoginProvider.EMAIL, new EmailLogin());
        // ^ This will cause a compilation error, because ? extends Login
        //   means the values might be any specific subtype of Login,
        //   and the compiler won't let you insert something that might violate it.

        // Also note that loginMap is effectively read-only from your code's perspective,
        // even though the underlying map might be modifiable if it was typed differently.
    }
}

______________________________________________________________________________________________________________________

https://docs.oracle.com/javase/tutorial/java/generics/upperBounded.html

package demo;

import java.util.Arrays;
import java.util.List;

public class Main {
    // method that works on lists of Number and the subtypes of Number, such as Integer, Double, and Float, you would specify List<? extends Number>.
    public static double sumOfList(List<? extends Number> list) {
        double s = 0.0;
        for (Number n : list)
            s += n.doubleValue();
        return s;
    }

    public static void main(String[] args) {

        List<Integer> li = Arrays.asList(1, 2, 3);
        System.out.println("sum = " + sumOfList(li));

        List<Double> ld = Arrays.asList(1.2, 2.3, 3.5);
        System.out.println("sum = " + sumOfList(ld));

        List<Float> lf = Arrays.asList(1.2f, 2.3f, 3.5f);
        System.out.println("sum = " + sumOfList(lf));

        List<Long> longList = Arrays.asList(1L, 2L, 3L);
        System.out.println("sum = " + sumOfList(longList));

        List<Short> shortList = Arrays.asList((short) 1, (short) 2, (short) 3);
        System.out.println("sum = " + sumOfList(shortList));

        List<Byte> byteList = Arrays.asList((byte) 1, (byte) 2, (byte) 3);
        System.out.println("sum = " + sumOfList(byteList));

        List<Number> numberList = Arrays.asList(1, 2.5, 3L, 4.4f);
        System.out.println("sum = " + sumOfList(numberList));

    }
}


Output:
sum = 6.0
sum = 7.0
sum = 7.0
sum = 6.0
sum = 6.0
sum = 6.0
sum = 10.900000095367432

https://docs.oracle.com/en/java/javase/23/docs/api/java.base/java/lang/Integer.html
https://docs.oracle.com/en/java/javase/23/docs/api/java.base/java/lang/Double.html
https://docs.oracle.com/en/java/javase/23/docs/api/java.base/java/lang/Float.html
https://docs.oracle.com/en/java/javase/23/docs/api/java.base/java/lang/Number.html
______________________________________________________________________________________________________________________

https://docs.oracle.com/javase/tutorial/java/generics/lowerBounded.html



Output:import java.util.ArrayList;
import java.util.List;

public class Main {
    // allow the list to accept `Integer` values or any of its supertypes, such as `Number` or `Object`
    public static void addNumbers(List<? super Integer> list) {
        for (int i = 1; i <= 10; i++) {
            list.add(i);
        }
    }

    public static void main(String[] args) {
        List<Number> numberList = new ArrayList<>();

        // Add numbers 1 to 10 using the lower-bounded wildcard method
        addNumbers(numberList);

        // Print the list
        System.out.println("Numbers in the list: " + numberList);

        // Sum the numbers
        double sum = 0.0;
        for (Object obj : numberList) {
            if (obj instanceof Number) {
                sum += ((Number) obj).doubleValue();
            }
        }

        System.out.println("Sum of numbers: " + sum);
    }
}
Numbers in the list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Sum of numbers: 55.0


Explanation:

    List<Number> is used to match List<? super Integer>.

    Numbers 1–10 are added.

    The list is printed, and values are summed using safe type checks.
	


Few changes to above code:
// Sum the numbers directly (no casting needed)
        double sum = 0.0;
        for (Number num : numberList) {
            sum += num.doubleValue();
        }
		
Changes made:
Used for (Number num : numberList) instead of for (Object obj : numberList).
Removed the instanceof and casting, since the list is strongly typed.

----------------------------------------------------------------------------------------------------------------------

import java.util.ArrayList;
import java.util.List;

public class Main {

    public static void addIntegers(List<? super Integer> list) {
        list.add(1);
        list.add(2);
        list.add(3);
    }

    public static double sumOfList(List<? super Integer> list) {
        double sum = 0.0;
        for (Object obj : list) {
            if (obj instanceof Number) {
                sum += ((Number) obj).doubleValue();
            }
        }
        return sum;
    }

    public static void main(String[] args) {

        List<Number> numberList = new ArrayList<>();
        addIntegers(numberList);

        System.out.println("sum = " + sumOfList(numberList));
    }
}


### Adding Integers to a List
The `addIntegers` method is designed to add a predefined set of integers (`1`, `2`, and `3`) to a list. The method uses a wildcard with the `super` keyword (`List<? super Integer>`) to allow the list to accept `Integer` values or any of its supertypes, such as `Number` or `Object`. This ensures flexibility in the types of lists that can be passed to the method.

### Calculating the Sum of a List
The `sumOfList` method calculates the sum of all numeric elements in a list. It accepts a `List<? super Integer>` as a parameter, iterates through its elements, and checks if each element is an instance of `Number`. If so, it casts the element to `Number` and adds its `doubleValue()` to the running total. This approach ensures that the method can handle lists containing numeric types beyond just `Integer`.

### Main Method Execution
The `main` method demonstrates the usage of the above methods. It creates a `List<Number>` to store numeric values, calls `addIntegers` to populate the list with integers, and then calculates the sum of the list using `sumOfList`. Finally, it prints the calculated sum to the console.

### Key Points
1. **Generics with Wildcards**: The use of `List<? super Integer>` allows flexibility in the types of lists that can be passed to the methods.
2. **Type Checking**: The `sumOfList` method uses `instanceof` to ensure that only numeric elements are included in the sum.
3. **Reusability**: The methods are designed to work with a variety of list types, making them reusable in different contexts.
______________________________________________________________________________________________________________________

-> 

import java.util.ArrayList;
import java.util.List;

public class Main {

    public static void printList(List<? super Integer> list) {
        for (Object item : list) {
            System.out.println(item);
        }
    }

    public static void main(String[] args) {

        // Create a list of Integers
        List<Integer> integerList = new ArrayList<>();
        integerList.add(1);
        integerList.add(2);
        integerList.add(3);

        // Call printList with a List of Integers
        printList(integerList);

        // Create a list of Numbers
        List<Number> numberList = new ArrayList<>();
        numberList.add(1.1);
        numberList.add(2.2);
        numberList.add(3.3);

        // Call printList with a List of Numbers
        printList(numberList);

        // Create a list of Objects
        List<Object> objectList = new ArrayList<>();
        objectList.add("Hello");
        objectList.add(42);
        objectList.add(3.14);

        // Call printList with a List of Objects
        printList(objectList);

    }
}

Output:
1
2
3
1.1
2.2
3.3
Hello
42
3.14
______________________________________________________________________________________________________________________

🔼 Upper-Bounded Wildcards (? extends T)

✅ Use When: You only need to read from a collection (you don’t add to it).

public void printNumbers(List<? extends Number> list) {
    for (Number n : list) {
        System.out.println(n);
    }
}

📌 Why? You can guarantee that everything in the list is at least a Number, so you can read safely as Number, but you can't add anything except null.



🔽 Lower-Bounded Wildcards (? super T)

✅ Use When: You only need to write (add) elements to a collection.

public void addIntegers(List<? super Integer> list) {
    list.add(1);
    list.add(2);
}

📌 Why? You can safely add Integer values, because the list accepts that type or its supertypes (e.g., Object, Number). But you can’t read elements as anything more specific than Object.

----------------------------------------------------------------------------------------------------------------------

import java.util.Arrays;
import java.util.List;

public class UpperBoundedWildcardExample {

    // Method that uses upper-bounded wildcard
    public static void printNumbers(List<? extends Number> list) {
        for (Number n : list) {
            System.out.println(n);
        }

        // list.add(5);         // ❌ Compile error: can't add to ? extends Number
        // list.add(3.14);      // ❌ Still not allowed
        // list.add(null);      // ✅ Only null is allowed
    }

    public static void main(String[] args) {
        List<Integer> intList = Arrays.asList(1, 2, 3);
        List<Double> doubleList = Arrays.asList(1.1, 2.2, 3.3);
        List<Number> numberList = Arrays.asList(10, 20.5, 30L);

        System.out.println("Integer List:");
        printNumbers(intList);

        System.out.println("\nDouble List:");
        printNumbers(doubleList);

        System.out.println("\nNumber List:");
        printNumbers(numberList);
    }
}

Output:
Integer List:
1
2
3

Double List:
1.1
2.2
3.3

Number List:
10
20.5
30

🔍 Summary:

    ✅ ? extends Number allows passing List<Integer>, List<Double>, etc.

    ✅ You can read elements safely as Number.

    ❌ You cannot add new elements (except null), because the compiler doesn't know the exact type inside the list.

----------------------------------------------------------------------------------------------------------------------

import java.util.ArrayList;
import java.util.List;

public class LowerBoundedWildcardExample {

    // Method using lower-bounded wildcard
    public static void addIntegers(List<? super Integer> list) {
        list.add(1);
        list.add(2);
        list.add(3);

        // You can only read as Object, not as Integer
        for (Object obj : list) {
            System.out.println(obj);
        }
    }

    public static void main(String[] args) {
        List<Number> numberList = new ArrayList<>();
        List<Object> objectList = new ArrayList<>();

        System.out.println("Adding to Number List:");
        addIntegers(numberList); // ✅ Allowed: Number is a supertype of Integer

        System.out.println("\nAdding to Object List:");
        addIntegers(objectList); // ✅ Allowed: Object is a supertype of Integer

        // List<Double> doubleList = new ArrayList<>();
        // addIntegers(doubleList); ❌ Not allowed: Double is not a supertype of Integer
    }
}

Output:
Adding to Number List:
1
2
3

Adding to Object List:
1
2
3

🔍 Key Takeaways:

    ✅ List<? super Integer> allows adding Integer values.

    ✅ Works with List<Number> and List<Object>.

    ❌ Does not accept List<Double> or List<Short> (they are not supertypes of Integer).

    ❌ You cannot read values as Integer, only as Object.

______________________________________________________________________________________________________________________

🔼 ? extends T (Upper Bound Wildcard)

    Direction: Used for reading or consuming data from a collection.

    Can add elements?: ❌ No — you cannot add elements (except null) to the list, because the exact subtype is unknown at compile-time.

    Can read elements as T?: ✅ Yes — you can safely read elements and treat them as type T.

    Use this when: You want to iterate through or read elements from a list without modifying it.

    Common scenario: Reading from a list like List<? extends Number> where you don’t care about the exact subtype but want to safely read numbers.
	

🔽 ? super T (Lower Bound Wildcard)

    Direction: Used for writing or producing data into a collection.

    Can add elements?: ✅ Yes — you can safely add elements of type T and its subclasses.

    Can read elements as T?: ❌ No — you can only read elements as Object because the compiler doesn't know how specific the type is.

    Use this when: You want to add or insert elements into a list.

    Common scenario: Writing to a list like List<? super Integer> where you're only concerned with putting Integer values into it.
	
______________________________________________________________________________________________________________________

🔼 ? extends Animal — Upper Bound (Read-Only)
✅ Scenario: I want to read animals and make them speak.




public class Animal {
    void speak() {
        System.out.println("Animal speaks");
    }
}



public class Dog extends Animal {
    void bark() {
        System.out.println("Dog barks");
    }
}



public class Cat extends Animal {
    void meow() {
        System.out.println("Cat meows");
    }
}




import java.util.List;

public class Main {

    public static void makeAllSpeak(List<? extends Animal> animals) {
        for (Animal a : animals) {
            a.speak();  // ✅ Safe: they are at least Animals
        }

        // ❌ animals.add(new Dog()); // Compiler error
    }


    public static void main(String[] args) {

        List<Dog> dogs = List.of(new Dog(), new Dog());
        makeAllSpeak(dogs);  // ✅ OK because Dog extends Animal

        List<Cat> cats = List.of(new Cat());
        makeAllSpeak(cats);  // ✅ OK


    }
}

Output:
Animal speaks
Animal speaks
Animal speaks


You can read, but cannot write to the list — Java doesn’t know the specific subtype at compile-time.

______________________________________________________________________________________________________________________

🔽 ? super Dog — Lower Bound (Write-Only)
✅ Scenario: I want to add Dogs into a collection.



public class Animal {
    void speak() {
        System.out.println("Animal speaks");
    }
}



public class Dog extends Animal {
    void bark() {
        System.out.println("Dog barks");
    }
}



public class Cat extends Animal {
    void meow() {
        System.out.println("Cat meows");
    }
}



import java.util.ArrayList;
import java.util.List;

public class Main {

    public static void addSomeDogs(List<? super Dog> list) {
        list.add(new Dog());  // ✅ Safe: list accepts Dog or its supertype
        list.add(new Dog());

        // Cannot call list.get(index) as Dog, only as Object
        Object obj = list.get(0);  // ✅ Safe, but not specific
        System.out.println("Object: " + obj);
    }


    public static void main(String[] args) {

        List<Animal> animals = new ArrayList<>();
        addSomeDogs(animals);  // ✅ Animal is a supertype of Dog

        List<Object> objects = new ArrayList<>();
        addSomeDogs(objects);  // ✅ Object is a supertype of Dog


    }
}

Output:
Object: org.example.Dog@776ec8df
Object: org.example.Dog@4eec7777

You can write Dog into the list, but you can’t read it back as a Dog — only as Object.
______________________________________________________________________________________________________________________

-> Upper Bounded Wildcards

https://docs.oracle.com/javase/tutorial/java/generics/upperBounded.html

you want to write a method that works on List<Integer>, List<Double>, and List<Number>; you can achieve this by using an upper bounded wildcard.

To write the method that works on lists of Number and the subtypes of Number, such as Integer, Double, and Float, you would specify List<? extends Number>. The term List<Number> is more restrictive than List<? extends Number> because the former matches a list of type Number only, whereas the latter matches a list of type Number or any of its subclasses.

import java.util.Arrays;
import java.util.List;

public class Main {

    public static double sumOfList(List<? extends Number> list) {
        double s = 0.0;
        for (Number n : list)
            s += n.doubleValue();
        return s;
    }

    public static void main(String[] args) {

        // using a list of integers
        List<Integer> li = Arrays.asList(1, 2, 3);
        System.out.println("sum = " + sumOfList(li));

        // using a list of doubles
        List<Double> ld = Arrays.asList(1.2, 2.3, 3.5);
        System.out.println("sum = " + sumOfList(ld));


    }
}

Output:
sum = 6.0
sum = 7.0

______________________________________________________________________________________________________________________

-> Unbounded Wildcards

https://docs.oracle.com/javase/tutorial/java/generics/unboundedWildcards.html

The unbounded wildcard <?> is used to indicate an unknown type.
----------------------------------------------
When used as Class<?>, it means "a class of some unknown type".


1) Accept any type of Class

import java.util.List;

public class Main {
   
    public static void printClassName(Class<?> clazz) {
        System.out.println("Class name: " + clazz.getName());
    }

    public static void main(String[] args) {

        printClassName(String.class);
        printClassName(Integer.class);
        printClassName(List.class);
    }
}

Output:
Class name: java.lang.String
Class name: java.lang.Integer
Class name: java.util.List


2) Holding a collection of unknown class types

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class Main {

    public static void main(String[] args) {

        List<Class<?>> classList = new ArrayList<>();
        classList.add(String.class);
        classList.add(Integer.class);
        classList.add(HashMap.class);

        for (Class<?> c : classList) {
            System.out.println("Loaded class: " + c.getName());
        }
    }
}

Output:
Loaded class: java.lang.String
Loaded class: java.lang.Integer
Loaded class: java.util.HashMap


3) Checking annotations, interfaces, or superclasses

import java.util.ArrayList;
import java.util.Arrays;

public class Main {

    public static void inspectClass(Class<?> clazz) {
        System.out.println("Superclass: " + clazz.getSuperclass());
        System.out.println("Interfaces: " + Arrays.toString(clazz.getInterfaces()));
        System.out.println("Annotations: " + Arrays.toString(clazz.getDeclaredAnnotations()));
    }

    public static void main(String[] args) {

        inspectClass(ArrayList.class);
    }
}

Output:
Superclass: class java.util.AbstractList
Interfaces: [interface java.util.List, interface java.util.RandomAccess, interface java.lang.Cloneable, interface java.io.Serializable]
Annotations: []


4) 
public class Main {

    /**
     * Example 1: A simple method accepting Class<?>
     * This method can print the name of any Class object passed to it,
     * regardless of its specific generic type.
     */
    public static void printClassName(Class<?> clazz) {
        System.out.println("--- Example 1: Printing Class Name ---");
        System.out.println("Class Name: " + clazz.getName());
        System.out.println("Simple Name: " + clazz.getSimpleName());
        System.out.println("Is Interface: " + clazz.isInterface());
        System.out.println("---");
    }


    public static void main(String[] args) {

        printClassName(String.class);
        printClassName(Integer.class);
        printClassName(Set.class);
    }
}

Output:
--- Example 1: Printing Class Name ---
Class Name: java.lang.String
Simple Name: String
Is Interface: false
---
--- Example 1: Printing Class Name ---
Class Name: java.lang.Integer
Simple Name: Integer
Is Interface: false
---
--- Example 1: Printing Class Name ---
Class Name: java.util.Set
Simple Name: Set
Is Interface: true
---
----------------------------------------------
______________________________________________________________________________________________________________________


-> Lower Bounded Wildcards
https://docs.oracle.com/javase/tutorial/java/generics/lowerBounded.html

You want to write a method that puts Integer objects into a list. To maximize flexibility, you would like the method to work on List<Integer>, List<Number>, and List<Object> — anything that can hold Integer values.

To write the method that works on lists of Integer and the supertypes of Integer, such as Integer, Number, and Object, you would specify List<? super Integer>. The term List<Integer> is more restrictive than List<? super Integer> because the former matches a list of type Integer only, whereas the latter matches a list of any type that is a supertype of Integer.


import java.util.ArrayList;
import java.util.List;

public class Main {

    public static void addNumbers(List<? super Integer> list) {
        for (int i = 1; i <= 10; i++) {
            list.add(i);
        }
    }
    public static void main(String[] args) {

        List<Object> objectList = new ArrayList<>();
        addNumbers(objectList);
        System.out.println("Object List: " + objectList);

        List<Number> numberList = new ArrayList<>();
        addNumbers(numberList);
        System.out.println("Number List: " + numberList);

    }
}

Output:
Object List: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Number List: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
______________________________________________________________________________________________________________________




