-> Switch Expressions:
https://wkorando.github.io/sip-of-java/001.html

public class Main {

    public static void main(String[] args) {
        int day = 100;
        String result = switch (day) {
            case 1 -> "Monday";
            case 2 -> "Tuesday";
            case 3 -> "Wednesday";
            case 4 -> "Thursday";
            case 5 -> "Friday";
            case 6 -> "Saturday";
            case 7 -> "Sunday";
            default -> {
                System.out.println("Invalid number");
                yield "Invalid day"; // Use yield to return a value from a block
            }

        };
        System.out.println("The day is: " + result);		

    }
}

Output:
Invalid number
The day is: Invalid day
------------------------------------------------------------------------

public class Main {

    public static void main(String[] args) {
        int day = 100;
        String dayType = switch (day) {
            case 1, 2, 3, 4, 5 -> "Weekday";
            case 6, 7 -> "Weekend";
            default -> "Invalid day";
        };
        System.out.println("Day " + day + " is a " + dayType);
		// System.out.println(String.format("Day %d is a %s", day, dayType));  //String.format is redundant here but just see how it can be used 
    }
}

Output:
Day 100 is a Invalid day
------------------------------------------------------------------------

-> in the below example using a enum a default case is not required 

public class Main {

    enum DaysOfWeek {
        SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY;
    }

    public static void main(String[] args) {

        DaysOfWeek dayOfWeek = DaysOfWeek.SUNDAY;
        String result = switch (dayOfWeek) {
            case SUNDAY -> "Sunday";
            case MONDAY -> "Monday";
            case TUESDAY -> "Tuesday";
            case WEDNESDAY -> "Wednesday";
            case THURSDAY -> "Thursday";
            case FRIDAY -> "Friday";
            case SATURDAY -> "Saturday";
        };

        System.out.println(result);  // Sunday
    }
}

______________________________________________________________________________

-> 

public class Main {

    enum DaysOfWeek {
        SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY;
    }

    public static void main(String[] args) {

        DaysOfWeek today = DaysOfWeek.WEDNESDAY;
        String result = switch (today) {
            case MONDAY -> "Start of the work week!";
            case TUESDAY -> "Second day of the work week!";
            case WEDNESDAY -> "Midweek day!";
            case THURSDAY -> "Almost Friday!";
            case FRIDAY -> "Last work day of the week!";
            case SATURDAY, SUNDAY -> "Weekend!";
        };

        System.out.println("Today is " + today + ": " + result);


    }
}

Output:
Today is WEDNESDAY: Midweek day!
______________________________________________________________________________

-> Key differences between switch expressions and switch statements:

Syntax:
Switch expressions use the -> (arrow) syntax for case labels, while switch statements use the : (colon) syntax.

Fall-through:
Switch expressions do not have fall-through behavior by default, eliminating the need for break statements.

Value return:
Switch expressions return a value, which can be assigned to a variable or used in other expressions. Switch statements do not return a value directly.

Exhaustiveness:
Switch expressions must be exhaustive, meaning that all possible input values must be handled. This can be achieved using a default case or by covering all possible values explicitly. 

yield keyword:
In cases where a block of code is needed for a case, the yield keyword is used to return a value from a switch expression.
______________________________________________________________________________