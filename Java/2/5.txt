-> The java.util.Arrays class provides the copyOfRange() method, which allows for copying a specific range of elements from an array into a new array. This method is particularly useful when you need to extract a portion of an array without modifying the original.

import java.util.Arrays;

public class PartialArrayCopy {
    public static void main(String[] args) {
        int[] originalArray = {10, 20, 30, 40, 50, 60};
        int startIndex = 2;
        int endIndex = 5;

        int[] partialArray = Arrays.copyOfRange(originalArray, startIndex, endIndex);

        System.out.println("Original Array: " + Arrays.toString(originalArray));
        System.out.println("Partial Array: " + Arrays.toString(partialArray));
    }
}

Output:
Original Array: [10, 20, 30, 40, 50, 60]
Partial Array: [30, 40, 50]

In this example, Arrays.copyOfRange() is used to create a new array partialArray containing elements from index 2 (inclusive) to index 5 (exclusive) of the originalArray. The output demonstrates that the partialArray contains the copied elements {30, 40, 50}, while the originalArray remains unchanged.
______________________________________________________________________________

-> import java.util.Arrays;

public class ArraysCopyOfExample {

    public static void main(String[] args) {
        // Original array
        int[] originalArray = {10, 20, 30, 40, 50};
        System.out.println("Original Array: " + Arrays.toString(originalArray));

        // Example 1: Copying the entire array
        int[] copiedArray1 = Arrays.copyOf(originalArray, originalArray.length);
        System.out.println("Copied Array (same length): " + Arrays.toString(copiedArray1));
        // Modifying the original array does not affect the copy
        originalArray[0] = 100;
        System.out.println("Original Array (after modification): " + Arrays.toString(originalArray));
        System.out.println("Copied Array (same length, after original modified): " + Arrays.toString(copiedArray1));

        System.out.println("\n--------------------\n");

        // Example 2: Copying a portion of the array (shorter length)
        int[] copiedArray2 = Arrays.copyOf(originalArray, 3);
        System.out.println("Copied Array (shorter length): " + Arrays.toString(copiedArray2));

        System.out.println("\n--------------------\n");

        // Example 3: Copying with a longer length (elements are padded with default values)
        int[] copiedArray3 = Arrays.copyOf(originalArray, 8);
        System.out.println("Copied Array (longer length): " + Arrays.toString(copiedArray3));
        // For primitive types like int, the padding is with 0.

        System.out.println("\n--------------------\n");

        // Example 4: Copying an array of Strings
        String[] originalStringArray = {"apple", "banana", "cherry"};
        String[] copiedStringArray = Arrays.copyOf(originalStringArray, originalStringArray.length);
        System.out.println("Original String Array: " + Arrays.toString(originalStringArray));
        System.out.println("Copied String Array: " + Arrays.toString(copiedStringArray));
        // For reference types like String, the padding with a longer length would be null.
        String[] copiedStringArrayLonger = Arrays.copyOf(originalStringArray, 5);
        System.out.println("Copied String Array (longer length): " + Arrays.toString(copiedStringArrayLonger));
    }
}

Output:
Original Array: [10, 20, 30, 40, 50]
Copied Array (same length): [10, 20, 30, 40, 50]
Original Array (after modification): [100, 20, 30, 40, 50]
Copied Array (same length, after original modified): [10, 20, 30, 40, 50]

--------------------

Copied Array (shorter length): [100, 20, 30]

--------------------

Copied Array (longer length): [100, 20, 30, 40, 50, 0, 0, 0]

--------------------

Original String Array: [apple, banana, cherry]
Copied String Array: [apple, banana, cherry]
Copied String Array (longer length): [apple, banana, cherry, null, null]
______________________________________________________________________________

-> 
1) int[] numbers = new int[] {1, 2, 3, 4, 5};

2) int[] numbers = {1, 2, 3, 4, 5};

Both statements above are valid in Java and do the same thing — they initialize an int[] array with the values {1, 2, 3, 4, 5} — but there's a subtle difference in syntax and when you can use each.


1) int[] numbers = new int[] {1, 2, 3, 4, 5};

Explicit instantiation.
You can use this anywhere, including in return statements, method arguments, or variable assignments.
This is the only option allowed outside of a declaration context.

2) int[] numbers = {1, 2, 3, 4, 5};

Shorthand syntax.
Only allowed at the point of declaration.
You cannot use this for assignments after declaration.
Preferred for simplicity.


❌ For example, this will NOT compile:

int[] numbers;
numbers = {1, 2, 3, 4, 5}; // ❌ Invalid


✅ But this works:

int[] numbers;
numbers = new int[]{1, 2, 3, 4, 5}; // ✅ Valid


public class Main {

    //sums all elements of an int array
    public static int sum(int[] numbers) {
        int total = 0;
        for (int n : numbers) {
            total += n;
        }
        return total;
    }
    public static void main(String[] args) {

        int result = sum(new int[]{1, 2, 3, 4, 5});
		//int result = sum({1, 2, 3}); // ❌ Error: array initializer not allowed here
        System.out.println("The sum is: " + result);  // The sum is: 15

    }
}

We can refactor the above using JDK’s optimized stream primitives, so we keep readability and performance while dropping the explicit accumulator loop.

---------------------------
//refactor 1. using Arrays.stream
import java.util.Arrays;

public class Main {

    public static int sum(int[] numbers) {
        return Arrays.stream(numbers).sum();
    }
    public static void main(String[] args) {

        int result = sum(new int[]{1, 2, 3, 4, 5});
        System.out.println("The sum is: " + result);  // The sum is: 15

    }
}
---------------------------
//refactor 2. using IntStream.of
import java.util.stream.IntStream;

public class Main {

    public static int sum(int... numbers) {   // var‑args, not an array parameter
        return IntStream.of(numbers).sum();
    }

    public static void main(String[] args) {

//        int result = sum(new int[]{1, 2, 3, 4, 5});  // This also works
        int result = sum(1, 2, 3, 4, 5);          // no need to wrap in new int[]{…}
        System.out.println("The sum is: " + result);  // The sum is: 15

    }
}

---------------------------

______________________________________________________________________________

-> A simple and practical Java program using Instant and Duration to measure how long a task takes 

import java.time.Duration;
import java.time.Instant;

public class Main {
    public static void main(String[] args) {
        System.out.println("Task started...");

        Instant start = Instant.now(); // capture start time

        // Simulate a task (e.g., sleep for 2.5 seconds)
        try {
            Thread.sleep(2500); // 2500 milliseconds = 2.5 seconds
        } catch (InterruptedException e) {
            System.out.println("Task was interrupted.");
        }

        Instant end = Instant.now(); // capture end time

        System.out.println("Task finished...");

        Duration duration = Duration.between(start, end);

        long seconds = duration.getSeconds();
        long millis = duration.toMillisPart(); // Java 9+

        System.out.printf("Task finished in %d seconds and %d milliseconds%n", seconds, millis);
    }
}

Output:
Task started...
Task finished...
Task finished in 2 seconds and 501 milliseconds



Key Difference:  toMillis()  vs toMillisPart()
toMillis() gives the total milliseconds of the duration.
toMillisPart() gives the millisecond fraction of the duration after full seconds.

-----------------------------------
long duration = end.toEpochMilli() - start.toEpochMilli(); // calculate duration in milliseconds
System.out.println("Task duration: " + duration + " milliseconds");
______________________________________________________________________________

-> An example that uses Instant and Duration to calculate a future time — like ETA(Estimated Time of Arrival) after 15 minutes from now:

import java.time.Duration;
import java.time.Instant;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;

public class Main {
    public static void main(String[] args) {
        Instant now = Instant.now();
        System.out.println("Current time: " + formatInstant(now));

        Duration travelTime = Duration.ofMinutes(15);

        Instant eta = now.plus(travelTime);
        System.out.println("Estimated arrival time (after 15 min): " + formatInstant(eta));
    }

    // Helper method to print readable time with time zone
    public static String formatInstant(Instant instant) {
        return DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
                .withZone(ZoneId.systemDefault())
                .format(instant);
    }
}

Output:
Current time: 2025-05-03 20:58:11
Estimated arrival time (after 15 min): 2025-05-03 21:13:11

Notes:
Instant gives you UTC timestamps, so ZoneId.systemDefault() localizes it to your system's time zone.
Duration.ofMinutes(15) is used to calculate the future time (ETA).

`withZone(ZoneId.systemDefault())` will reflect the local time zone of the system where the code runs. In business terms , it ensures that when displaying or logging timestamps, they appear in the local time zone of the system where the application is running. This helps users and stakeholders see dates and times in a familiar, relevant context, reducing confusion and improving clarity in reports, logs, and user interfaces.

https://docs.oracle.com/en/java/javase/23/docs/api/java.base/java/time/format/DateTimeFormatter.html

----------------------------------

// Helper method to print readable time with time zone
    public static String formatInstant(Instant instant) {
        return DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
                .withZone(ZoneId.of("Asia/Calcutta"))
                .format(instant);
    }
______________________________________________________________________________

-> Here's an enhanced version of the above program that includes a countdown simulation to the estimated arrival time.

import java.time.Duration;
import java.time.Instant;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;

public class Main {

    public static void main(String[] args) {
        Instant now = Instant.now();
        System.out.println("Current time: " + formatInstant(now));

        Duration travelTime = Duration.ofMinutes(1); // for demo, set to 1 minute
        Instant eta = now.plus(travelTime);
        System.out.println("Estimated arrival time: " + formatInstant(eta));

        System.out.println("\nStarting countdown...");

        while (Instant.now().isBefore(eta)) {
            Duration remaining = Duration.between(Instant.now(), eta);
            long secondsLeft = remaining.getSeconds();

            System.out.print("\rTime remaining: " + secondsLeft + " seconds");
            try {
                Thread.sleep(1000); // wait 1 second
            } catch (InterruptedException e) {
                System.out.println("\nCountdown interrupted.");
                break;
            }
        }

        System.out.println("\nArrived at destination!");
    }

    public static String formatInstant(Instant instant) {
        return DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
                .withZone(ZoneId.systemDefault())
                .format(instant);
    }
}

Output:
Current time: 2025-05-03 21:15:13
Estimated arrival time: 2025-05-03 21:16:13

Starting countdown...
Time remaining: 60 seconds
Time remaining: 59 seconds
...
...
Time remaining: 0 seconds
Arrived at destination!


Notes:
    The \r lets the countdown update on the same line (works in most terminals).
    For demo purposes, it's set to Duration.ofMinutes(1) — increase this to 5 or 15 minutes as needed.
    Thread.sleep(1000) gives a ticking effect.
	


```java
System.out.print("\rTime remaining: " + secondsLeft + " seconds");
```

The `\r` ensures that each update to the countdown timer replaces the previous line, rather than printing a new line for each update. This is useful for creating dynamic output in the console, such as progress bars or countdowns.
______________________________________________________________________________

-> Instant.now().getEpochSecond()

import java.time.Instant;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;

public class EpochSecondsDemo {

    public static void main(String[] args) {
        // ▶ Current epoch time in seconds (UTC)
        long currentTimeSeconds = Instant.now().getEpochSecond();
        System.out.println("Current epoch seconds: " + currentTimeSeconds);

        // (Optional) Convert back to a readable local date‑time
        String localDateTime = Instant.ofEpochSecond(currentTimeSeconds)
                                      .atZone(ZoneId.systemDefault())
                                      .format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);
        System.out.println("Local date‑time: " + localDateTime);
    }
}

Output:
Current epoch seconds: 1746453236
Local date‑time: 2025-05-05T09:53:56

How it works

    Instant.now() grabs the current instant on the timeline.
    .getEpochSecond() returns that instant as the number of whole seconds elapsed since 1970‑01‑01T00:00:00Z.
    The second block shows how to turn that epoch value back into a local date‑time string—handy for verification or logging.
______________________________________________________________________________

-> 

import java.time.Instant;

public class ElapsedTimeDemo {

    public static void main(String[] args) {

        // 1️ Start the timer
        Instant start = Instant.now();

        // 2️ Simulate some work — replace with real code
        doWork();

        // 3️ Capture the end instant
        long elapsedMillis = Instant.now().toEpochMilli() - start.toEpochMilli();
		// long elapsedMillis = Duration.between(start, Instant.now()).toMillis();
		

        // 4️ Display the result
        System.out.println("Elapsed time (ms): " + elapsedMillis);
    }

    private static void doWork() {
        try {
            // Simulate a task that takes roughly 450 ms
            Thread.sleep(450);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
}
Output:
Elapsed time (ms): 452

How it works

    Record the starting point with Instant start = Instant.now();.
    Execute whatever code you want to measure (doWork() in the demo).
    Compute the difference by converting both instants to epoch milliseconds:
    long elapsedMillis = Instant.now().toEpochMilli() - start.toEpochMilli();
    Print or otherwise use the elapsed time.
	
    We can also use Duration.between(start, Instant.now()).toMillis() for the same result.
	Duration.between(start, Instant.now()) yields a Duration object representing the time span from start to “now,” and .toMillis() converts that span to milliseconds—cleaner and more idiomatic than subtracting epoch values yourself.
______________________________________________________________________________

-> If a method has a varargs parameter, the varargs parameter, it is flexible in how you pass arguments to it. 
The number of arguments you provide for it is flexible, ranging from zero to many, or even an array. When you provide zero arguments, it's treated as an empty array, which often achieves the desired "optional" behavior from a functional perspective.


public class VarargsExample {

    // Method with two regular parameters and one varargs parameter
    public static void processItems(String prefix, int count, String... items) {
        System.out.println("Prefix: " + prefix);
        System.out.println("Count: " + count);
        System.out.println("Items provided: " + items.length);
        if (items.length > 0) {
            System.out.print("Actual items: ");
            for (String item : items) {
                System.out.print(item + " ");
            }
            System.out.println();
        } else {
            System.out.println("No specific items provided.");
        }
        System.out.println("---");
    }

    public static void main(String[] args) {
        // Case 1: Passing multiple individual arguments to varargs
        processItems("Order", 1, "Apple", "Banana", "Cherry");


        // Case 2: Passing a single argument to varargs
        processItems("Product", 2, "Laptop");


        // Case 3: Passing ZERO arguments to varargs (varargs is an empty array)
        processItems("Report", 3); // No items provided for varargs


        // Case 4: Passing an array directly to varargs
        String[] colors = {"Red", "Green", "Blue"};
        processItems("Colors", 4, colors);


        // Case 5: Passing a null array (this is different from zero arguments)
        // processItems("Null Test", 5, null); // This would cause a NullPointerException if 'items' is accessed without null check
        // because 'items' itself would be a single-element array containing null.
        // Better to just pass no arguments for "no items".
    }
}


Output:
Prefix: Order
Count: 1
Items provided: 3
Actual items: Apple Banana Cherry 
---
Prefix: Product
Count: 2
Items provided: 1
Actual items: Laptop 
---
Prefix: Report
Count: 3
Items provided: 0
No specific items provided.
---
Prefix: Colors
Count: 4
Items provided: 3
Actual items: Red Green Blue 
---
______________________________________________________________________________